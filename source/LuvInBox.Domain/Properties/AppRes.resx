<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="enumDegreeCollege" xml:space="preserve">
    <value>College</value>
  </data>
  <data name="enumDegreeHighSchool" xml:space="preserve">
    <value>High school</value>
  </data>
  <data name="enumDegreeMBA" xml:space="preserve">
    <value>MBA</value>
  </data>
  <data name="enumDocCPF" xml:space="preserve">
    <value>CPF</value>
  </data>
  <data name="enumDocID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="enumDocIF" xml:space="preserve">
    <value>EIN</value>
  </data>
  <data name="enumDocOthers" xml:space="preserve">
    <value>Other Documents</value>
  </data>
  <data name="enumDocPassport" xml:space="preserve">
    <value>Passport</value>
  </data>
  <data name="enumDocRNE" xml:space="preserve">
    <value>RNE</value>
  </data>
  <data name="enumDriverLicense" xml:space="preserve">
    <value>Driver License</value>
  </data>
  <data name="enumGenderFemale" xml:space="preserve">
    <value>Female</value>
  </data>
  <data name="enumGenderMale" xml:space="preserve">
    <value>Male</value>
  </data>
  <data name="enumMaritalStsDivorced" xml:space="preserve">
    <value>Divorced</value>
  </data>
  <data name="enumMaritalStsMarried" xml:space="preserve">
    <value>Married</value>
  </data>
  <data name="enumMaritalStsSeparated" xml:space="preserve">
    <value>Separeted</value>
  </data>
  <data name="enumMaritalStsSingle" xml:space="preserve">
    <value>Single</value>
  </data>
  <data name="enumMaritalStsWidowed" xml:space="preserve">
    <value>Wildowed</value>
  </data>
  <data name="enumMaster" xml:space="preserve">
    <value>Master</value>
  </data>
  <data name="enumPhD" xml:space="preserve">
    <value>PhD</value>
  </data>
  <data name="enumPostgraduate" xml:space="preserve">
    <value>Pos Graduate</value>
  </data>
  <data name="frmDateDataN" xml:space="preserve">
    <value>MM-dd-yyyy</value>
  </data>
  <data name="frmZipCodeFmt" xml:space="preserve">
    <value>^\d{5}([-]|\s*)?(\d{4})?$</value>
  </data>
  <data name="InvalidZipCode" xml:space="preserve">
    <value>Invalid Zip code</value>
  </data>
  <data name="lblAccountNumber" xml:space="preserve">
    <value>Account number</value>
  </data>
  <data name="lblAddCity" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="lblAddComplement" xml:space="preserve">
    <value>Complement</value>
  </data>
  <data name="lblAddCountry" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="lblAddLocal" xml:space="preserve">
    <value>Localidade</value>
  </data>
  <data name="lblAddNumber" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="lblAddress" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="lblAddState" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="lblAddZipCode" xml:space="preserve">
    <value>Zipcode</value>
  </data>
  <data name="lblAdrress" xml:space="preserve">
    <value>Adrress</value>
  </data>
  <data name="lblAlternativeAddress" xml:space="preserve">
    <value>Alternative Address</value>
  </data>
  <data name="lblBankBranch" xml:space="preserve">
    <value>Bank branch</value>
  </data>
  <data name="lblBankCode" xml:space="preserve">
    <value>Bank code</value>
  </data>
  <data name="lblBankInfo" xml:space="preserve">
    <value>Bank Info</value>
  </data>
  <data name="lblBirthday" xml:space="preserve">
    <value>Birthday</value>
  </data>
  <data name="lblCategory" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="lblCommercialContact" xml:space="preserve">
    <value>Commercial Contact</value>
  </data>
  <data name="lblCompanyName" xml:space="preserve">
    <value>Company Name</value>
  </data>
  <data name="lblDegree" xml:space="preserve">
    <value>Degree</value>
  </data>
  <data name="lblDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblDocumentNumber" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="lblEmail" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="lblFamilyName" xml:space="preserve">
    <value>Family name</value>
  </data>
  <data name="lblFantasyName" xml:space="preserve">
    <value>Fantasy name</value>
  </data>
  <data name="lblFirstName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="lblFoundedIn" xml:space="preserve">
    <value>Founded in</value>
  </data>
  <data name="lblGender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="lblHasPhysicalStore" xml:space="preserve">
    <value>Has Physical Store</value>
  </data>
  <data name="lblImageURL" xml:space="preserve">
    <value>Image URL</value>
  </data>
  <data name="lblLogoURL" xml:space="preserve">
    <value>Logo URL</value>
  </data>
  <data name="lblMainAddress" xml:space="preserve">
    <value>Main Address</value>
  </data>
  <data name="lblMaritalStatus" xml:space="preserve">
    <value>Marital status</value>
  </data>
  <data name="lblMiddleName" xml:space="preserve">
    <value>Middle name</value>
  </data>
  <data name="lblMobileNumber" xml:space="preserve">
    <value>Mobile</value>
  </data>
  <data name="lblName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="lblNumber" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="lblOff" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="lblOffPrice" xml:space="preserve">
    <value>Off Price</value>
  </data>
  <data name="lblPaymentForm" xml:space="preserve">
    <value>Payment Form</value>
  </data>
  <data name="lblPaymentId" xml:space="preserve">
    <value>Payment Id</value>
  </data>
  <data name="lblPaymentPreviousStatus" xml:space="preserve">
    <value>Payment Previous Status</value>
  </data>
  <data name="lblPaymentStatus" xml:space="preserve">
    <value>Payment Status</value>
  </data>
  <data name="lblPaymentSuccess" xml:space="preserve">
    <value>Payment Success</value>
  </data>
  <data name="lblPaymentToken" xml:space="preserve">
    <value>Payment Token</value>
  </data>
  <data name="lblPaymentType" xml:space="preserve">
    <value>Payment Type</value>
  </data>
  <data name="lblPhoneNumber" xml:space="preserve">
    <value>Phone number</value>
  </data>
  <data name="lblPosition" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="lblPrice" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="lblProduct" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="Msg_Invalid_Age" xml:space="preserve">
    <value>Invalid age</value>
  </data>
  <data name="Msg_Invalid_Foundation" xml:space="preserve">
    <value>Invalid Date of Foudation</value>
  </data>
  <data name="Msg_Invalid_Pwd" xml:space="preserve">
    <value>Invalid password</value>
  </data>
  <data name="Msg_Ivalid_BankInfo" xml:space="preserve">
    <value>Invalid Bank info</value>
  </data>
  <data name="Msg_Usr_Already_Exists" xml:space="preserve">
    <value>Username already exists</value>
  </data>
  <data name="RequiredAccountNumber" xml:space="preserve">
    <value>Account number is required</value>
  </data>
  <data name="RequiredBankBranch" xml:space="preserve">
    <value>Bank branch is required</value>
  </data>
  <data name="RequiredBankCode" xml:space="preserve">
    <value>Bank code is required</value>
  </data>
  <data name="RequiredCity" xml:space="preserve">
    <value>City is required</value>
  </data>
  <data name="RequiredCompanyName" xml:space="preserve">
    <value>Company name is required</value>
  </data>
  <data name="RequiredCountry" xml:space="preserve">
    <value>Country is required</value>
  </data>
  <data name="RequiredCustomerName" xml:space="preserve">
    <value>Customer name is Required</value>
  </data>
  <data name="RequiredDate" xml:space="preserve">
    <value>Date is required</value>
  </data>
  <data name="RequiredDocument" xml:space="preserve">
    <value>Document is required</value>
  </data>
  <data name="RequiredEmail" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="RequiredFamilyName" xml:space="preserve">
    <value>Familly name is requied</value>
  </data>
  <data name="RequiredFantasyName" xml:space="preserve">
    <value>Fantasy name is required</value>
  </data>
  <data name="RequiredFoundedIn" xml:space="preserve">
    <value>Founded in is required</value>
  </data>
  <data name="RequiredLocal" xml:space="preserve">
    <value>Local is required</value>
  </data>
  <data name="RequiredLogoSite" xml:space="preserve">
    <value>Logo site is required</value>
  </data>
  <data name="RequiredName" xml:space="preserve">
    <value>Name is requied</value>
  </data>
  <data name="RequiredNumber" xml:space="preserve">
    <value>Number is required</value>
  </data>
  <data name="RequiredNumber1" xml:space="preserve">
    <value>Number is required</value>
  </data>
  <data name="RequiredState" xml:space="preserve">
    <value>State is required</value>
  </data>
  <data name="RequiredZipCode" xml:space="preserve">
    <value>Zip code is required</value>
  </data>
</root>